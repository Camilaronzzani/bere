#include <stdio.h>
#include <string.h>
#include <locale.h>
#include <time.h>
#include <stdlib.h>
#include <windows.h>

#define MAX_PRODUTOS 5
#define MAX_NOME 50
#define ARQUIVO_LIMPEZA "limpeza.txt"
#define ARQUIVO_ALIMENTOS "alimentos.txt"
#define ARQUIVO_PADARIA "padaria.txt"

typedef struct
{
    int id;
    char nome[MAX_NOME];
    float preco;
    int quantidade;
} Produto;

Produto limpeza[MAX_PRODUTOS];
Produto alimentos[MAX_PRODUTOS];
Produto padaria[MAX_PRODUTOS];

int caixaAberto = 0, idGlobal = 1, contadorLimpeza = 0, contadorAlimentos = 0, contadorPadaria = 0;
float fundoDeCaixa = 0, totalVendas = 0;
FILE *arquivo;

void pega_hora_atual()
{
    time_t agora;
    struct tm *infoTempo;
    time(&agora);
    infoTempo = localtime(&agora);
    int hora = infoTempo->tm_hour;

    printf("\n===========================================\n");
    if (hora >= 5 && hora < 12)
        printf("Bom dia Dona Bere, Bem-vindo ao Mercadinho! \n");
    else if (hora >= 12 && hora < 18)
        printf("Boa tarde Dona Bere, Bem-vindo ao Mercadinho! \n");
    else
        printf("Boa noite Dona Bere, Bem-vindo ao Mercadinho! \n");
}

void exibirMenu()
{
    printf("\n============================================\n");
    printf("           MENU MERCADINHO             \n");
    printf("============================================\n");
    if (caixaAberto == 0)
    {
        printf("1. Abrir Caixa \n");
        printf("2. Sair \n");
    }
    else
    {
        printf("1. Cadastrar Produto \n");
        printf("2. Exibir Produtos \n");
        printf("3. Realizar Compra \n");
        printf("4. Realizar Pagamento \n");
        printf("5. Realizar Sangria \n");
        printf("6. Fechar Caixa \n");
        printf("7. Sair \n");
    }

    printf("============================================\n");
    printf("Escolha uma opcao: ");
}

void abrirCaixa()
{
    if (caixaAberto)
    {
        printf("\n");
    }
    else
    {
        do
        {
            system("clear");
            printf("\nDigite o valor inicial do caixa: R$");
            scanf("%f", &fundoDeCaixa);
            getchar();
            if (fundoDeCaixa <= 0)
            {
                printf("Valor invalido! Digite um valor positivo.\n");
            }
        } while (fundoDeCaixa <= 0);

        caixaAberto = 1;
        totalVendas = 0;
        printf("Caixa aberto com sucesso!\n");
    }
}

void cadastrarCategoria()
{
    int categoria, continuar;
    do
    {
        system("clear || cls");
        printf("\n===============================\n");
        printf("      Cadastro de Produto\n");
        printf("===============================");
        printf("\nEscolha a categoria do produto:\n");
        printf("1. Material de Limpeza\n");
        printf("2. Venda de Alimentos\n");
        printf("3. Padaria\n");
        printf("4. Voltar ao menu\n");
        printf("Categoria: ");
        if (scanf("%d", &categoria) != 1)
        {
            printf("Entrada invalida! Digite um numero.\n");
            while (getchar() != '\n')
                ;
            continue;
        }

        switch (categoria)
        {
        case 1:
            cadastrarProduto(limpeza, &contadorLimpeza, ARQUIVO_LIMPEZA);
            break;
        case 2:
            cadastrarProduto(alimentos, &contadorAlimentos, ARQUIVO_ALIMENTOS);
            break;
        case 3:
            cadastrarProduto(padaria, &contadorPadaria, ARQUIVO_PADARIA);
            break;
        case 4:
            return;
        default:
            printf("Opcao invalida!\n");
        }
    } while (categoria != 4);
}
void escrever_Log(const char *mensagem, ...) {
    time_t agora = time(NULL);
    struct tm *tempo = localtime(&agora);

    FILE *arquivo = fopen("log_mercado.log", "a");
    if (!arquivo) {
        perror("Erro ao abrir o arquivo de log");
        return;
    }

    // Escreve data e hora
    fprintf(arquivo, "[%02d/%02d/%04d %02d:%02d:%02d] ",
        tempo->tm_mday, tempo->tm_mon + 1, tempo->tm_year + 1900,
        tempo->tm_hour, tempo->tm_min, tempo->tm_sec);

    // Escreve a mensagem formatada
    va_list args;
    va_start(args, mensagem);
    vfprintf(arquivo, mensagem, args);
    va_end(args);

    fprintf(arquivo, "\n");
    fclose(arquivo);
}

void cadastrarProduto(Produto categoria[], int *contador, const char *nomeArquivo)
{
    int continuar = 0, cont = 0;

    categoria = (int *)malloc(*contador * sizeof(int));
    if (categoria == NULL)
    {
        perror("Falha ao alocar memoria para o array de ponteiros");
        return 1;
    }

    if (*contador >= MAX_PRODUTOS)
    {
        printf("Limite de produtos atingido!\n");
        return;
    }

    Produto p;
    p.id = idGlobal++;
    idGlobal++;

    FILE *arquivo = fopen(nomeArquivo, "r");
    if (!arquivo)
    {
        perror("Erro ao abrir arquivo para salvar produto");
        return;
    }

    while (fscanf(arquivo, "%d;%49[^;];%f;%d\n", &p.id, p.nome, &p.preco, &p.quantidade) == 4)
    {
        cont++;
    }

    do
    {
        getchar();

        printf("Nome do produto: ");
        fgets(p.nome, MAX_NOME, stdin);
        p.nome[strcspn(p.nome, "\n")] = '\0';
        if (strlen(p.nome) <= 2)
        {
            printf("Nome muito curto\n");
            return;
        }

        printf("Preco: R$");
        while (scanf("%f", &p.preco) != 1 || p.preco <= 0)
        {
            printf("Invalido. Preco positivo: R$");
            while (getchar() != '\n')
                ;
        }

        printf("Quantidade: ");
        while (scanf("%d", &p.quantidade) != 1 || p.quantidade < 0)
        {
            printf("Invalido. Quantidade positiva: ");
            while (getchar() != '\n')
                ;
        }

        categoria[*contador] = p;
        (*contador)++;

        FILE *arquivo = fopen(nomeArquivo, "a");
        if (!arquivo)
        {
            perror("Erro ao abrir arquivo para salvar produto");
            return;
        }
        p.id = cont;
        cont++;

        fprintf(arquivo, "%d;%s;%.2f;%d\n", p.id, p.nome, p.preco, p.quantidade);
        fclose(arquivo);

        escrever_Log("Produto cadastrado - ID: %d, Nome: %s, Quantidade: %d, Preco: %.2f", p.id, p.nome, p.quantidade, p.preco);

        printf("\nProduto cadastrado com sucesso!");

        printf("\nDeseja cadastrar outro produto? (Sim 1/Nao 0): ");
        scanf(" %d", &continuar);
        getchar();

    } while (continuar == 1);

}

void exibirProdutos(const char *nomeArquivo, const char *titulo)
{
    FILE *arquivo = fopen(nomeArquivo, "r");
    if (!arquivo)
    {
        perror("Erro ao abrir arquivo");
        return;
    }
    Produto p;
    printf("\n===== %s =====\n", titulo);
    while (fscanf(arquivo, "%d;%49[^;];%f;%d\n", &p.id, p.nome, &p.preco, &p.quantidade) == 4)
    {
        if (p.quantidade == 0)
            printf("%d | %s | R$%.2f | (SEM ESTOQUE)\n", p.id, p.nome, p.preco);
        else
            printf("%d | %s | R$%.2f | (%d unidades)\n", p.id, p.nome, p.preco, p.quantidade);
    }
    fclose(arquivo);
}

void comprarProduto(Produto categoria[], int quantidadeProdutos, float *total, const char *nomeArquivo)
{
    FILE *arquivo = fopen(nomeArquivo, "r");
    if (!arquivo)
    {
        perror("Erro ao abrir arquivo");
        return;
    }
    int idBuscado, quantidade;
    printf("\nDigite o ID do produto: ");
    scanf("%d", &idBuscado);

    Produto p;
    while (fscanf(arquivo, "%d;%49[^;];%f;%d\n", &p.id, p.nome, &p.preco, &p.quantidade) == 4)
    {
        if (p.id == idBuscado)
        {
            puts("Digite a quantidade solicitada:");
            scanf("%d", &quantidade);
            if (quantidade <= p.quantidade)
            {
                printf("Produto: %s\n", p.nome);
                printf("Preco: R$%.2f\n", p.preco);
                printf("Quantidade solicitada: %d\n", quantidade);
                printf("Valor total: R$%.2f\n", quantidade * p.preco);
                *total += quantidade * p.preco;
                p.quantidade -= quantidade;

                FILE *arquivoTemp = fopen(nomeArquivo, "w");
                if (!arquivoTemp)
                {
                    perror("Erro ao abrir arquivo temporario");
                    fclose(arquivo);
                    return;
                }
                fprintf(arquivoTemp, "%d;%s;%.2f;%d\n", p.id, p.nome, p.preco, p.quantidade);
                fclose(arquivoTemp);
                return;
            }
            else
            {
                puts("Quantidade insuficiente");
            }
        }
        else
        {
            ferror("ID nÃ£o encontrado");
            return;
        }
    }
    fclose(arquivo);
}

void pagamentoCartao(float totalGeral, float *totalLimpeza, float *totalAlimentos, float *totalPadaria)
{
    int confirmacao, trocarMetodo;
    do
    {
        printf("Pagamento no cartao (1 - OK, 0 - Nao OK): ");
        scanf("%d", &confirmacao);

        if (!confirmacao)
        {
            printf("Pagamento nao realizado.\n");
            printf("Trocar metodo? (1 - Sim / 0 - Tentar de novo): ");
            scanf("%d", &trocarMetodo);

            if (trocarMetodo == 1)
            {
                realizarPagamento(totalLimpeza, totalAlimentos, totalPadaria);
            }
        }
    } while (!confirmacao);

    totalVendas += totalGeral;
    printf("Pagamento no cartao confirmado.\n");
}

void realizarPagamento(float *totalLimpeza, float *totalAlimentos, float *totalPadaria)
{
    int metodo, escolha;
    float valorPago, troco;
    float totalGeral = *totalLimpeza + *totalAlimentos + *totalPadaria;

    printf("\n===== Resumo da Compra =====\n");
    printf("Material de Limpeza: R$%.2f\n", *totalLimpeza);
    printf("Alimentos: R$%.2f\n", *totalAlimentos);
    printf("Padaria: R$%.2f\n", *totalPadaria);
    printf("Total Geral: R$%.2f\n", totalGeral);

    if (totalGeral > 0)
    {
        printf("\nEscolha a forma de pagamento:\n");
        printf("1 - Dinheiro\n");
        printf("2 - CartÃ£o\n");
        printf("Metodo: ");
        scanf("%d", &metodo);

        if (metodo == 1)
        {
            float desconto = 0;
            if (totalGeral <= 50)
            {
                desconto = 0.05;
            }
            else if (totalGeral > 50 && totalGeral < 200)
            {
                desconto = 0.10;
            }
            else
            {
                printf("Informe o desconto (em %%): ");
                scanf("%f", &desconto);
                desconto /= 100;
            }

            totalGeral *= (1 - desconto);
            printf("Total com desconto: R$%.2f\n", totalGeral);

            printf("Valor recebido: R$");
            scanf("%f", &valorPago);

            if (valorPago < totalGeral)
            {
                puts("Valor insuficiente. Pagamento nÃ£o finalizado\n");
                puts("Quer concluir o pagamento com cartao? (0 - NÃ£o | 1 - Sim)");
                scanf("%d", &escolha);
                if (escolha = 0)
                {
                    puts("Pagamento cancelado");
                    sleep(2);
                    return;
                }
                else if (escolha = 1)
                {
                    pagamentoCartao(totalGeral, totalLimpeza, totalAlimentos, totalPadaria);
                }
                else
                {
                    puts("opcao invalida");
                    sleep(2);
                    return;
                }
            }
            else
            {
                troco = valorPago - totalGeral;
                printf("Troco: R$%.2f\n", troco);
                totalVendas += totalGeral;
            }
        }
        else if (metodo == 2)
        {
            pagamentoCartao(totalGeral, totalLimpeza, totalAlimentos, totalPadaria);
        }
        else
        {
            printf("Metodo invalido!\n");
            return;
        }
    }
    else
    {
        puts("\nSem item! Por favor, selecione a opÃ§Ã£o de Realizar Compra!");
        sleep(2);
        return;
    }
    escrever_Log("Venda realizada - Forma de pagamento %d, Valor: %.2f, troco: %.2f", metodo, totalGeral, troco);
}

void realizarSangria()
{
    if (!caixaAberto)
    {
        printf("\nOperacao nao permitida: Caixa fechado!\n");
        printf("Por favor, abra o caixa primeiro.\n");
        return;
    }

    float valor;
    printf("\n========== SANGRIA DE CAIXA ==========\n");
    printf("Saldo total disponivel: R$%.2f\n", fundoDeCaixa + totalVendas);

    //  valida o valor
    int tentativas = 0;
    while (tentativas < 3)
    {
        printf("\nDigite o valor a ser retirado: R$");

        if (scanf("%f", &valor) != 1)
        {
            printf("Valor invalido! Digite apenas numeros.\n");
            while (getchar() != '\n')
                ;
            tentativas++;
            continue;
        }
        getchar();

        if (valor <= 0)
        {
            printf("Valor deve ser positivo!\n");
            tentativas++;
            continue;
        }

        if (valor > (fundoDeCaixa + totalVendas))
        {
            printf("Saldo insuficiente! Saldo atual: R$%.2f\n", fundoDeCaixa + totalVendas);
            return;
        }
        break;
    }

    if (tentativas >= 3)
    {
        printf("Numero maximo de tentativas excedido.\n");
        return;
    }

    if (valor <= fundoDeCaixa)
    {
        fundoDeCaixa -= valor;
    }
    else
    {
        float diferenca = valor - fundoDeCaixa;
        fundoDeCaixa = 0;
        totalVendas -= diferenca;
    }

    printf("\nSangria realizada com sucesso!\n");
    printf("Valor retirado: R$%.2f\n", valor);
    printf("Novo saldo disponivel: R$%.2f\n", fundoDeCaixa + totalVendas);
    printf("=================================\n");
}

void fecharCaixa(float totalLimpeza, float totalAlimentos, float totalPadaria)
{
    if (!caixaAberto)
    {
        system("clear");
        printf("\nO caixa ja esta fechado!\n");
    }
    else
    {
        caixaAberto = 0;

        printf("\n========== FECHAMENTO DE CAIXA ==========\n");
        printf("1. Valor de abertura: R$%.2f\n", fundoDeCaixa);
        printf("2. Faturamento total (apenas vendas): R$%.2f\n", totalVendas);
        printf("3. Faturamento por categoria:\n");
        printf("   a. Material de Limpeza: R$%.2f\n", totalLimpeza);
        printf("   b. Alimentos: R$%.2f\n", totalAlimentos);
        printf("   c. Padaria: R$%.2f\n", totalPadaria);
        printf("\nTotal em caixa (abertura + vendas): R$%.2f\n", fundoDeCaixa + totalVendas);
    }
}

void exibirTodosProdutos()
{
    exibirProdutos(ARQUIVO_LIMPEZA, "Limpeza");
    exibirProdutos(ARQUIVO_ALIMENTOS, "Alimentos");
    exibirProdutos(ARQUIVO_PADARIA, "Padaria");
}

int main()
{
    int opcao, categoriaCompra, opcaoSub, sair;
    float totalLimpeza = 0, totalAlimentos = 0, totalPadaria = 0;
    setlocale(LC_ALL, "Portuguese_Brazil");

    pega_hora_atual();
    do
    {
        if (caixaAberto == 0)
        {
            exibirMenu();
            scanf("%d", &opcao);
            getchar();
        }
        if (opcao == 2)
        {
            if (!caixaAberto)
            {
                system("clear");
                sair = 1;
                printf("Saindo do sistema...\n Ate Mais!\n");
                break;
            }
        }
        else if (opcao == 1)
        {
            abrirCaixa();

            exibirMenu();
            scanf("%d", &opcaoSub);
            getchar();
            switch (opcaoSub)
            {
            case 1:
                cadastrarCategoria();
                break;
            case 2:
                exibirTodosProdutos();
                break;
            case 3:
                exibirTodosProdutos();
                printf("\nEscolha a categoria:\n");
                printf("1. Material de Limpeza\n");
                printf("2. Venda de Alimentos\n");
                printf("3. Padaria\n");
                printf("Categoria: ");
                scanf("%d", &categoriaCompra);
                switch (categoriaCompra)
                {
                case 1:
                    comprarProduto(limpeza, contadorLimpeza, &totalLimpeza, ARQUIVO_LIMPEZA);
                    break;
                case 2:
                    comprarProduto(alimentos, contadorAlimentos, &totalAlimentos, ARQUIVO_ALIMENTOS);
                    break;
                case 3:
                    comprarProduto(padaria, contadorPadaria, &totalPadaria, ARQUIVO_PADARIA);
                    break;
                default:
                    printf("Categoria invalida!\n");
                }
                break;
            case 4:
                realizarPagamento(&totalLimpeza, &totalAlimentos, &totalPadaria);
                break;
            case 5:
                realizarSangria();
                break;
            case 6:
                fecharCaixa(totalLimpeza, totalAlimentos, totalPadaria);
                break;
            case 7:
                if (caixaAberto == 1)
                {
                    printf("\nNÃ£o e possivel sair com o caixa aberto. feche o caixa antes de sair.\n");
                }
                else
                {
                    sair = 1;
                }
                break;
            default:
                system("clear || cls");
                printf("OpÃ§Ã£o invalida!\n");
                break;
            }
        }
        else if (opcao != 1)
        {
            printf("operacao invalida");
        }
    } while (sair != 1);

    return 0;
}
