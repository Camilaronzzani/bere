#include <stdio.h>
#include <string.h>
#include <locale.h>
#include <time.h>
#include <stdlib.h>
#include <ctype.h> // add p converter letra min e maiusc, vice versa

#define MAX_PRODUTOS 5
#define MAX_NOME 50
#define nome_arquivo "dados.txt"
#define tamanho_buffer 100

typedef struct {
    int id;
    char nome[MAX_NOME];
    float preco;
    int quantidade;
} Produto;

Produto limpeza[MAX_PRODUTOS];
Produto alimentos[MAX_PRODUTOS];
Produto padaria[MAX_PRODUTOS];

int caixaAberto = 0, idGlobal = 1, contadorLimpeza = 0, contadorAlimentos = 0, contadorPadaria = 0;
float fundoDeCaixa = 0;
float totalVendas = 0;

// fun√ßao para realizar sangria

void realizarSangria() {
    if (!caixaAberto) {
        printf("\nOpera√ß√£o n√£o permitida: Caixa fechado!\n");
        printf("Por favor, abra o caixa primeiro.\n");
        return;
    }

    float valor;
    printf("\n========== SANGRIA DE CAIXA ==========\n");
    printf("Saldo total dispon√≠vel: R$%.2f\n", fundoDeCaixa + totalVendas);
    
    //  valida o valor 
    int tentativas = 0;
    while (tentativas < 3) {
        printf("\nDigite o valor a ser retirado: R$");
        
        if (scanf("%f", &valor) != 1) {
            printf("Valor inv√°lido! Digite apenas n√∫meros.\n");
            while (getchar() != '\n');
            tentativas++;
            continue;
        }
        getchar();

        if (valor <= 0) {
            printf("Valor deve ser positivo!\n");
            tentativas++;
            continue;
        }

        if (valor > (fundoDeCaixa + totalVendas)) {
            printf("Saldo insuficiente! Saldo atual: R$%.2f\n", fundoDeCaixa + totalVendas);
            return;
        }
        break;
    }

    if (tentativas >= 3) {
        printf("N√∫mero m√°ximo de tentativas excedido.\n");
        return;
    }

    if (valor <= fundoDeCaixa) {
        fundoDeCaixa -= valor;
    } else {
        float diferenca = valor - fundoDeCaixa;
        fundoDeCaixa = 0;
        totalVendas -= diferenca;
    }

    // confirma a opera√ßao
    printf("\nSangria realizada com sucesso!\n");
    printf("Valor retirado: R$%.2f\n", valor);
    printf("Novo saldo dispon√≠vel: R$%.2f\n", fundoDeCaixa + totalVendas);
    printf("=================================\n");
}

void pega_hora_atual() {
    time_t agora;
    struct tm *infoTempo;
    time(&agora);
    infoTempo = localtime(&agora);
    int hora = infoTempo->tm_hour;

    printf("\n===========================================\n");
    if (hora >= 5 && hora < 12)
        printf("Bom dia Dona Ber√™, Bem-vindo ao Mercadinho! ‚òÄÔ∏è\n");
    else if (hora >= 12 && hora < 18)
        printf("Boa tarde Dona Ber√™, Bem-vindo ao Mercadinho! üå§Ô∏è\n");
    else
        printf("Boa noite Dona Ber√™, Bem-vindo ao Mercadinho! üåô\n");
}

void exibirMenu() {
    printf("\n============================================\n");
    printf("           MENU MERCADINHO üõçÔ∏è              \n");
    printf("============================================\n");
    if (caixaAberto == 0) {
        printf("1. Abrir Caixa üíµ\n");
        printf("2. Sair üö™\n");
    }
    else {
        printf("1. Cadastrar Produto üìù\n");
        printf("2. Exibir Produtos üì¶\n");
        printf("3. Realizar Compra üõí\n");
        printf("4. Realizar Pagamento üí≥\n");
        printf("5. Realizar Sangria üí∏\n"); // opcao add
        printf("6. Fechar Caixa üßæ\n");
        printf("7. Sair üö™\n"); // ajuste de numero
    }
    printf("============================================\n");
    printf("Escolha uma op√ß√£o: ");
}

void abrirCaixa() {
    if (caixaAberto) {
        printf("\nO caixa j√° est√° aberto!\n");
        return;
    }

    do {
        system("clear || cls");
        printf("\nDigite o valor inicial do caixa: R$");
        
        if (scanf("%f", &fundoDeCaixa) != 1) {
            printf("Valor inv√°lido! Digite apenas n√∫meros.\n");
            while (getchar() != '\n');
            continue;
        }
        getchar();

        if (fundoDeCaixa <= 0) {
            printf("Valor deve ser positivo!\n");
            continue;
        }

        break;
    } while (1);

    caixaAberto = 1;
    totalVendas = 0;
    printf("\nCaixa aberto com sucesso com R$%.2f\n", fundoDeCaixa);
}

// valida√ßao do s e n  
void cadastrarProduto(Produto categoria[], int *contador) {
    char escolha;
    int continuar;

    FILE *arquivo;
    arquivo = fopen(nome_arquivo, "a");
    if (arquivo == NULL) {
        perror("Erro ao abrir o arquivo para escrita");
        return;
    }

    if (*contador >= MAX_PRODUTOS) {
        printf("Limite de produtos atingido!\n\n");
        fclose(arquivo);
        return;
    }

    printf("\nID do produto: %d\n", idGlobal);
    categoria[*contador].id = idGlobal;
    getchar();

    printf("Nome do produto: ");
    fgets(categoria[*contador].nome, MAX_NOME, stdin);
    categoria[*contador].nome[strcspn(categoria[*contador].nome, "\n")] = '\0';

    printf("Pre√ßo: R$");
    scanf("%f", &categoria[*contador].preco);
    getchar();

    printf("Quantidade: ");
    scanf("%d", &categoria[*contador].quantidade);
    getchar();

    fprintf(arquivo, "ID: %d; Produto: %s; Pre√ßo: %.2f; Quantidade: %d\n",
            categoria[*contador].id,
            categoria[*contador].nome,
            categoria[*contador].preco,
            categoria[*contador].quantidade);

    fclose(arquivo);
    printf("Dados gravados com sucesso no arquivo '%s'.\n", nome_arquivo);

    (*contador)++;
    idGlobal++;
    int tentativas = 0;
    do {
        printf("\nDeseja cadastrar outro produto? (S/N): ");
        scanf(" %c", &escolha);
        getchar();
        escolha = toupper(escolha);
        
        if (escolha != 'S' && escolha != 'N') {
            printf("Op√ß√£o inv√°lida! Digite apenas S (Sim) ou N (N√£o).\n");
            tentativas++;
            if (tentativas >= 3) {
                printf("N√∫mero m√°ximo de tentativas excedido.\n");
                escolha = 'N'; // for√ßando sair dps de muitas tentativas
                break;
            }
        }
    } while (escolha != 'S' && escolha != 'N');

    continuar = (escolha == 'S') ? 1 : 0;

    if (continuar == 1) {
        system("clear || cls");
        cadastrarProduto(categoria, contador);
    }

    system("clear || cls");
    printf("\nOpera√ß√£o de cadastro conclu√≠da.\n");
}

void cadastrarCategoria(int *contadorLimpeza, int *contadorAlimentos, int *contadorPadaria) {
    int categoria;
    do {
        system("clear || cls");
        printf("\n===============================\n");
        printf("      Cadastro de Produto\n");
        printf("===============================");
        printf("\nEscolha a categoria do produto:\n");
        printf("1. Material de Limpeza\n");
        printf("2. Venda de Alimentos\n");
        printf("3. Padaria\n");
        printf("4. Voltar ao menu\n");
        printf("Categoria: ");
        if (scanf("%d", &categoria) != 1) {
            printf("Entrada inv√°lida! Digite um n√∫mero.\n");
            while (getchar() != '\n');
            continue;
        }

        switch (categoria) {
            case 1: cadastrarProduto(limpeza, contadorLimpeza); break;
            case 2: cadastrarProduto(alimentos, contadorAlimentos); break;
            case 3: cadastrarProduto(padaria, contadorPadaria); break;
            case 4: return;
            default: printf("Op√ß√£o inv√°lida!\n");
        }
    } while (categoria != 4);
}

void exibirProdutos(Produto categoria[], int contador, char *titulo) {
    int i;
    printf("\n===== %s =====\n", titulo);
    if (contador == 0) {
        printf("Nenhum produto cadastrado.\n");
        return;
    }

    for (i = 0; i < contador; i++) {
        char estoque_msg[20];
        if (categoria[i].quantidade == 0) {
            strcpy(estoque_msg, "(SEM ESTOQUE)");
        }
        else {
            sprintf(estoque_msg, "(%d unidades)", categoria[i].quantidade);
        }

        printf("ID: %d | %s - R$%.2f - %s\n",
               categoria[i].id, categoria[i].nome,
               categoria[i].preco, estoque_msg);
    }
}

int verificarEstoque(Produto p, int quantidade) {
    if (p.quantidade == 0) {
        printf("Produto sem estoque!\n");
        return 0;
    }
    if (p.quantidade < quantidade) {
        printf("Quantidade insuficiente em estoque!\n");
        return 0;
    }
    return 1;
}

void comprarProduto(Produto categoria[], int quantidadeProdutos, float *total) {
    int idBuscado, quantidade;
    printf("\nDigite o ID do produto: ");
    if (scanf("%d", &idBuscado) != 1) {
        printf("ID inv√°lido!\n");
        while (getchar() != '\n');
        return;
    }

    for (int i = 0; i < quantidadeProdutos; i++) {
        if (categoria[i].id == idBuscado) {
            printf("Quantidade desejada: ");
            if (scanf("%d", &quantidade) != 1 || quantidade <= 0) {
                printf("Quantidade inv√°lida!\n");
                while (getchar() != '\n');
                return;
            }

            if (!verificarEstoque(categoria[i], quantidade)) {
                return;
            }

            categoria[i].quantidade -= quantidade;
            float valorCompra = quantidade * categoria[i].preco;
            *total += valorCompra;
            printf("Compra realizada! Total: R$%.2f\n", valorCompra);
            return;
        }
    }
    printf("Produto com ID %d n√£o encontrado!\n", idBuscado);
}

void realizarPagamento(float totalLimpeza, float totalAlimentos, float totalPadaria) {
    float totalGeral = totalLimpeza + totalAlimentos + totalPadaria;

    if (totalGeral == 0) {
        printf("\nNenhum produto selecionado para compra!\n");
        return;
    }

    printf("\n===== Resumo da Compra =====\n");
    printf("Material de Limpeza: R$%.2f\n", totalLimpeza);
    printf("Alimentos: R$%.2f\n", totalAlimentos);
    printf("Padaria: R$%.2f\n", totalPadaria);
    printf("Total Geral: R$%.2f\n", totalGeral);

    int metodo;
    printf("\nEscolha a forma de pagamento:\n");
    printf("1 - Dinheiro\n");
    printf("2 - Cart√£o\n");
    printf("M√©todo: ");
    if (scanf("%d", &metodo) != 1) {
        printf("Op√ß√£o inv√°lida!\n");
        while (getchar() != '\n');
        return;
    }

    if (metodo == 1) {
        float desconto = 0;
        if (totalGeral <= 50) {
            desconto = 0.05;
        }
        else if (totalGeral < 200) {
            desconto = 0.10;
        }
        else {
            printf("Informe o desconto (em %%): ");
            if (scanf("%f", &desconto) != 1 || desconto < 0 || desconto > 100) {
                printf("Desconto inv√°lido! Usando 0%%.\n");
                desconto = 0;
            }
            desconto /= 100;
        }

        totalGeral *= (1 - desconto);
        printf("Total com desconto: R$%.2f\n", totalGeral);

        float valorPago;
        printf("Valor recebido: R$");
        if (scanf("%f", &valorPago) != 1 || valorPago <= 0) {
            printf("Valor inv√°lido! Pagamento cancelado.\n");
            while (getchar() != '\n');
            return;
        }

        if (valorPago < totalGeral) {
            printf("Valor insuficiente. Pagamento cancelado.\n");
            return;
        }

        float troco = valorPago - totalGeral;
        printf("Troco: R$%.2f\n", troco);
        totalVendas += totalGeral;
    }
    else if (metodo == 2) {
        int confirmacao;
        do {
            printf("Pagamento no cart√£o (1 - OK, 0 - N√£o OK): ");
            if (scanf("%d", &confirmacao) != 1) {
                printf("Op√ß√£o inv√°lida!\n");
                while (getchar() != '\n');
                return;
            }

            if (!confirmacao) {
                int trocarMetodo;
                printf("Pagamento n√£o realizado.\n");
                printf("Trocar m√©todo? (1 - Sim / 0 - Tentar de novo): ");
                if (scanf("%d", &trocarMetodo) != 1) {
                    printf("Op√ß√£o inv√°lida!\n");
                    while (getchar() != '\n');
                    return;
                }

                if (trocarMetodo == 1) {
                    realizarPagamento(totalLimpeza, totalAlimentos, totalPadaria);
                    return;
                }
            }
        } while (!confirmacao);

        totalVendas += totalGeral;
        printf("Pagamento no cart√£o confirmado.\n");
    }
    else {
        printf("M√©todo inv√°lido!\n");
    }
}

void fecharCaixa(float totalLimpeza, float totalAlimentos, float totalPadaria) {
    if (!caixaAberto) {
        system("clear || cls");
        printf("\nO caixa j√° est√° fechado!\n");
    }
    else {
        caixaAberto = 0;

        printf("\n========== FECHAMENTO DE CAIXA ==========\n");
        printf("1. Valor de abertura: R$%.2f\n", fundoDeCaixa);
        printf("2. Faturamento total (apenas vendas): R$%.2f\n", totalVendas);
        printf("3. Faturamento por categoria:\n");
        printf("   a. Material de Limpeza: R$%.2f\n", totalLimpeza);
        printf("   b. Alimentos: R$%.2f\n", totalAlimentos);
        printf("   c. Padaria: R$%.2f\n", totalPadaria);
        printf("\nTotal em caixa (abertura + vendas): R$%.2f\n", fundoDeCaixa + totalVendas);
    }
}

int main() {
    int opcao, categoriaCompra, opcaoSub, sair = 0;
    float totalLimpeza = 0, totalAlimentos = 0, totalPadaria = 0;
    setlocale(LC_ALL, "Portuguese_Brazil");

    pega_hora_atual();
    do {
        if (caixaAberto == 0) {
            exibirMenu();
            if (scanf("%d", &opcao) != 1) {
                printf("Op√ß√£o inv√°lida! Digite um n√∫mero.\n");
                while (getchar() != '\n');
                continue;
            }
            getchar();
        }

        if (opcao == 2) {
            if (caixaAberto) {
                printf("Voc√™ deve fechar o caixa antes de sair!\n");
                continue;
            }
            else {
                system("clear || cls");
                sair = 1;
                printf("Saindo do sistema...\n At√© Mais!\n");
                break;
            }
        }
        else if (opcao == 1) {
            abrirCaixa();

            do {
                exibirMenu();
                if (scanf("%d", &opcaoSub) != 1) {
                    printf("Op√ß√£o inv√°lida! Digite um n√∫mero.\n");
                    while (getchar() != '\n');
                    continue;
                }
                getchar();

                switch (opcaoSub) {
                    case 1: 
                        cadastrarCategoria(&contadorLimpeza, &contadorAlimentos, &contadorPadaria); 
                        break;
                    case 2: 
                        exibirProdutos(limpeza, contadorLimpeza, "Material de Limpeza");
                        exibirProdutos(alimentos, contadorAlimentos, "Venda de Alimentos");
                        exibirProdutos(padaria, contadorPadaria, "Padaria");
                        break;
                    case 3:
                        printf("\nEscolha a categoria:\n");
                        printf("1. Material de Limpeza\n");
                        printf("2. Venda de Alimentos\n");
                        printf("3. Padaria\n");
                        printf("Categoria: ");
                        if (scanf("%d", &categoriaCompra) != 1) {
                            printf("Op√ß√£o inv√°lida!\n");
                            while (getchar() != '\n');
                            break;
                        }
                        switch (categoriaCompra) {
                            case 1: comprarProduto(limpeza, contadorLimpeza, &totalLimpeza); break;
                            case 2: comprarProduto(alimentos, contadorAlimentos, &totalAlimentos); break;
                            case 3: comprarProduto(padaria, contadorPadaria, &totalPadaria); break;
                            default: printf("Categoria inv√°lida!\n");
                        }
                        break;
                    case 4: 
                        realizarPagamento(totalLimpeza, totalAlimentos, totalPadaria); 
                        break;
                    case 5:  // opcao de sangria
                        realizarSangria();
                        break;
                    case 6: 
                        fecharCaixa(totalLimpeza, totalAlimentos, totalPadaria); 
                        break;
                    case 7:
                        system("clear || cls");
                        sair = 1;
                        printf("Saindo do sistema...\n At√© Mais!\n");
                        break;
                    default:
                        system("clear || cls");
                        printf("Op√ß√£o inv√°lida!\n");
                        break;
                }
            } while (opcaoSub != 7 && !sair);
        }
        else if (opcao != 1) {
            printf("Opera√ß√£o inv√°lida!\n");
        }
    } while (sair != 1);

    return 0;
}
